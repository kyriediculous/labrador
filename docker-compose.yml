version: '3.5'
services:
  orchestrator:
    image: livepeer/go-livepeer:master
    command: '-orchestrator -transcoder -network offchain -serviceAddr orchestrator:8936'
    ports:
      - 8936:8936
  broadcaster:
    image: livepeer/go-livepeer:master
    command: '-broadcaster -network offchain -orchAddr orchestrator:8936 -ethPassword test -monitor -rtmpAddr broadcaster:1935 -httpAddr broadcaster:8935 -cliAddr broadcaster:7935'
    ports:
      - 1935:1935
      - 7935:7935
      - 8935:8935
    volumes:
      - '~/.lpData/rinkeby/keystore:/root/.lpData/rinkeby/keystore'
  streamtester:
    build:
      context: ./stream-tester
    command: './streamtester -server -serverAddr streamtester:3001'
    ports: 
      - '3001:3001'
    depends_on: 
      - broadcaster
  stream-sender:
    build:
      context: ./stream-sender
    command: '-interval 2h -server streamtester:3001 -broadcaster broadcaster -http stream-sender:5000'
    depends_on:
      - broadcaster
      - streamtester
    ports:
      - 5000:5000
  dashboard:
    depends_on: 
      - stream-sender
    build:
      context: ./dashboard
      args:
        base_url: localhost:5000
    ports:
      - 3003:80
  cadvisor:
    image: 'google/cadvisor:latest'
    ports:
      - '8080:8080'
    restart: unless-stopped
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
      - '/dev/kmsg:/dev/kmsg:ro'
    depends_on: 
      - broadcaster
  grafana:
    image: grafana/grafana
    ports:
      - '3002:3000'
    restart: unless-stopped
    depends_on: 
      - broadcaster
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_AUTH_ANONYMOUS_ENABLED: 'True'
      GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
      GF_AUTH_ANONYMOUS_ORG_ROLE: Editor # use Viewer for production
    restart: unless-stopped
    volumes:
      - './grafana/grafanaDatasources.yml:/etc/grafana/provisioning/datasources/datasources.yml'
      - './grafana/grafanaDashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml'
      - './grafana/dashboards:/var/lib/grafana/dashboards'
  node-exporter:
    image: 'prom/node-exporter:latest'
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - >-
        --collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"
      - >-
        --collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse.lxc|mqueue)(fs|)$$"
    restart: unless-stopped
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    depends_on: 
      - broadcaster
  prometheus:
    image: 'prom/prometheus:latest'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=30d'
    depends_on:
      - cadvisor
      - node-exporter
      - broadcaster
    ports:
      - '9090:9090'
    restart: unless-stopped
    volumes:
      - './prometheus.yml:/etc/prometheus/prometheus.yml'